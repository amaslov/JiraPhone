/*
	RemoteAvatar.h
	The implementation of properties and methods for the RemoteAvatar object.
	Generated by SudzC.com
*/
#import "RemoteAvatar.h"

@implementation RemoteAvatar
	@synthesize base64Data = _base64Data;
	@synthesize contentType = _contentType;
	@synthesize _id = __id;
	@synthesize owner = _owner;
	@synthesize system = _system;
	@synthesize type = _type;

	- (id) init
	{
		if(self = [super init])
		{
			self.base64Data = nil;
			self.contentType = nil;
			self.owner = nil;
			self.type = nil;

		}
		return self;
	}

	+ (RemoteAvatar*) newWithNode: (CXMLNode*) node
	{
		if(node == nil) { return nil; }
		return (RemoteAvatar*)[[[RemoteAvatar alloc] initWithNode: node] autorelease];
	}

	- (id) initWithNode: (CXMLNode*) node {
		if(self = [super initWithNode: node])
		{
			self.base64Data = [Soap getNodeValue: node withName: @"base64Data"];
			self.contentType = [Soap getNodeValue: node withName: @"contentType"];
			self._id = [[Soap getNodeValue: node withName: @"id"] longLongValue];
			self.owner = [Soap getNodeValue: node withName: @"owner"];
			self.system = [[Soap getNodeValue: node withName: @"system"] boolValue];
			self.type = [Soap getNodeValue: node withName: @"type"];
		}
		return self;
	}

	- (NSMutableString*) serialize
	{
		return [self serialize: @"RemoteAvatar"];
	}
  
	- (NSMutableString*) serialize: (NSString*) nodeName
	{
		NSMutableString* s = [[NSMutableString alloc] init];
		[s appendFormat: @"<%@", nodeName];
		[s appendString: [self serializeAttributes]];
		[s appendString: @">"];
		[s appendString: [self serializeElements]];
		[s appendFormat: @"</%@>", nodeName];
		return [s autorelease];
	}
	
	- (NSMutableString*) serializeElements
	{
		NSMutableString* s = [super serializeElements];
		if (self.base64Data != nil) [s appendFormat: @"<base64Data>%@</base64Data>", [[self.base64Data stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.contentType != nil) [s appendFormat: @"<contentType>%@</contentType>", [[self.contentType stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		[s appendFormat: @"<id>%@</id>", [NSString stringWithFormat: @"%ld", self._id]];
		if (self.owner != nil) [s appendFormat: @"<owner>%@</owner>", [[self.owner stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		[s appendFormat: @"<system>%@</system>", (self.system)?@"true":@"false"];
		if (self.type != nil) [s appendFormat: @"<type>%@</type>", [[self.type stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];

		return s;
	}
	
	- (NSMutableString*) serializeAttributes
	{
		NSMutableString* s = [super serializeAttributes];

		return s;
	}
	
	-(BOOL)isEqual:(id)object{
		if(object != nil && [object isKindOfClass:[RemoteAvatar class]]) {
			return [[self serialize] isEqualToString:[object serialize]];
		}
		return NO;
	}
	
	-(NSUInteger)hash{
		return [Soap generateHash:self];

	}
	
	- (void) dealloc
	{
		if(self.base64Data != nil) { [self.base64Data release]; }
		if(self.contentType != nil) { [self.contentType release]; }
		if(self.owner != nil) { [self.owner release]; }
		if(self.type != nil) { [self.type release]; }
		[super dealloc];
	}

@end
