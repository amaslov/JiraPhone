/*
	RemoteComment.h
	The implementation of properties and methods for the RemoteComment object.
	Generated by SudzC.com
*/
#import "RemoteComment.h"

@implementation RemoteComment
	@synthesize author = _author;
	@synthesize body = _body;
	@synthesize created = _created;
	@synthesize groupLevel = _groupLevel;
	@synthesize _id = __id;
	@synthesize roleLevel = _roleLevel;
	@synthesize updateAuthor = _updateAuthor;
	@synthesize updated = _updated;

	- (id) init
	{
		if(self = [super init])
		{
			self.author = nil;
			self.body = nil;
			self.created = nil;
			self.groupLevel = nil;
			self._id = nil;
			self.roleLevel = nil;
			self.updateAuthor = nil;
			self.updated = nil;

		}
		return self;
	}

	+ (RemoteComment*) newWithNode: (CXMLNode*) node
	{
		if(node == nil) { return nil; }
		return (RemoteComment*)[[[RemoteComment alloc] initWithNode: node] autorelease];
	}

	- (id) initWithNode: (CXMLNode*) node {
		if(self = [super initWithNode: node])
		{
			self.author = [Soap getNodeValue: node withName: @"author"];
			self.body = [Soap getNodeValue: node withName: @"body"];
			self.created = [Soap dateFromString: [Soap getNodeValue: node withName: @"created"]];
			self.groupLevel = [Soap getNodeValue: node withName: @"groupLevel"];
			self._id = [Soap getNodeValue: node withName: @"id"];
			self.roleLevel = [Soap getNodeValue: node withName: @"roleLevel"];
			self.updateAuthor = [Soap getNodeValue: node withName: @"updateAuthor"];
			self.updated = [Soap dateFromString: [Soap getNodeValue: node withName: @"updated"]];
		}
		return self;
	}

	- (NSMutableString*) serialize
	{
		return [self serialize: @"RemoteComment"];
	}
  
	- (NSMutableString*) serialize: (NSString*) nodeName
	{
		NSMutableString* s = [[NSMutableString alloc] init];
		[s appendFormat: @"<%@", nodeName];
		[s appendString: [self serializeAttributes]];
		[s appendString: @">"];
		[s appendString: [self serializeElements]];
		[s appendFormat: @"</%@>", nodeName];
		return [s autorelease];
	}
	
	- (NSMutableString*) serializeElements
	{
		NSMutableString* s = [super serializeElements];
		if (self.author != nil) [s appendFormat: @"<author>%@</author>", [[self.author stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.body != nil) [s appendFormat: @"<body>%@</body>", [[self.body stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.created != nil) [s appendFormat: @"<created>%@</created>", [Soap getDateString: self.created]];
		if (self.groupLevel != nil) [s appendFormat: @"<groupLevel>%@</groupLevel>", [[self.groupLevel stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self._id != nil) [s appendFormat: @"<id>%@</id>", [[self._id stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.roleLevel != nil) [s appendFormat: @"<roleLevel>%@</roleLevel>", [[self.roleLevel stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.updateAuthor != nil) [s appendFormat: @"<updateAuthor>%@</updateAuthor>", [[self.updateAuthor stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.updated != nil) [s appendFormat: @"<updated>%@</updated>", [Soap getDateString: self.updated]];

		return s;
	}
	
	- (NSMutableString*) serializeAttributes
	{
		NSMutableString* s = [super serializeAttributes];

		return s;
	}
	
	-(BOOL)isEqual:(id)object{
		if(object != nil && [object isKindOfClass:[RemoteComment class]]) {
			return [[self serialize] isEqualToString:[object serialize]];
		}
		return NO;
	}
	
	-(NSUInteger)hash{
		return [Soap generateHash:self];

	}
	
	- (void) dealloc
	{
		if(self.author != nil) { [self.author release]; }
		if(self.body != nil) { [self.body release]; }
		if(self.created != nil) { [self.created release]; }
		if(self.groupLevel != nil) { [self.groupLevel release]; }
		if(self._id != nil) { [self._id release]; }
		if(self.roleLevel != nil) { [self.roleLevel release]; }
		if(self.updateAuthor != nil) { [self.updateAuthor release]; }
		if(self.updated != nil) { [self.updated release]; }
		[super dealloc];
	}

@end
