/*
	RemoteWorklog.h
	The implementation of properties and methods for the RemoteWorklog object.
	Generated by SudzC.com
*/
#import "RemoteWorklog.h"

@implementation RemoteWorklog
	@synthesize author = _author;
	@synthesize comment = _comment;
	@synthesize created = _created;
	@synthesize groupLevel = _groupLevel;
	@synthesize _id = __id;
	@synthesize roleLevelId = _roleLevelId;
	@synthesize startDate = _startDate;
	@synthesize timeSpent = _timeSpent;
	@synthesize timeSpentInSeconds = _timeSpentInSeconds;
	@synthesize updateAuthor = _updateAuthor;
	@synthesize updated = _updated;

	- (id) init
	{
		if(self = [super init])
		{
			self.author = nil;
			self.comment = nil;
			self.created = nil;
			self.groupLevel = nil;
			self._id = nil;
			self.roleLevelId = nil;
			self.startDate = nil;
			self.timeSpent = nil;
			self.updateAuthor = nil;
			self.updated = nil;

		}
		return self;
	}

	+ (RemoteWorklog*) newWithNode: (CXMLNode*) node
	{
		if(node == nil) { return nil; }
		return (RemoteWorklog*)[[[RemoteWorklog alloc] initWithNode: node] autorelease];
	}

	- (id) initWithNode: (CXMLNode*) node {
		if(self = [super initWithNode: node])
		{
			self.author = [Soap getNodeValue: node withName: @"author"];
			self.comment = [Soap getNodeValue: node withName: @"comment"];
			self.created = [Soap dateFromString: [Soap getNodeValue: node withName: @"created"]];
			self.groupLevel = [Soap getNodeValue: node withName: @"groupLevel"];
			self._id = [Soap getNodeValue: node withName: @"id"];
			self.roleLevelId = [Soap getNodeValue: node withName: @"roleLevelId"];
			self.startDate = [Soap dateFromString: [Soap getNodeValue: node withName: @"startDate"]];
			self.timeSpent = [Soap getNodeValue: node withName: @"timeSpent"];
			self.timeSpentInSeconds = [[Soap getNodeValue: node withName: @"timeSpentInSeconds"] longLongValue];
			self.updateAuthor = [Soap getNodeValue: node withName: @"updateAuthor"];
			self.updated = [Soap dateFromString: [Soap getNodeValue: node withName: @"updated"]];
		}
		return self;
	}

	- (NSMutableString*) serialize
	{
		return [self serialize: @"RemoteWorklog"];
	}
  
	- (NSMutableString*) serialize: (NSString*) nodeName
	{
		NSMutableString* s = [[NSMutableString alloc] init];
		[s appendFormat: @"<%@", nodeName];
		[s appendString: [self serializeAttributes]];
		[s appendString: @">"];
		[s appendString: [self serializeElements]];
		[s appendFormat: @"</%@>", nodeName];
		return [s autorelease];
	}
	
	- (NSMutableString*) serializeElements
	{
		NSMutableString* s = [super serializeElements];
		if (self.author != nil) [s appendFormat: @"<author>%@</author>", [[self.author stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.comment != nil) [s appendFormat: @"<comment>%@</comment>", [[self.comment stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.created != nil) [s appendFormat: @"<created>%@</created>", [Soap getDateString: self.created]];
		if (self.groupLevel != nil) [s appendFormat: @"<groupLevel>%@</groupLevel>", [[self.groupLevel stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self._id != nil) [s appendFormat: @"<id>%@</id>", [[self._id stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.roleLevelId != nil) [s appendFormat: @"<roleLevelId>%@</roleLevelId>", [[self.roleLevelId stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.startDate != nil) [s appendFormat: @"<startDate>%@</startDate>", [Soap getDateString: self.startDate]];
		if (self.timeSpent != nil) [s appendFormat: @"<timeSpent>%@</timeSpent>", [[self.timeSpent stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		[s appendFormat: @"<timeSpentInSeconds>%@</timeSpentInSeconds>", [NSString stringWithFormat: @"%ld", self.timeSpentInSeconds]];
		if (self.updateAuthor != nil) [s appendFormat: @"<updateAuthor>%@</updateAuthor>", [[self.updateAuthor stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.updated != nil) [s appendFormat: @"<updated>%@</updated>", [Soap getDateString: self.updated]];

		return s;
	}
	
	- (NSMutableString*) serializeAttributes
	{
		NSMutableString* s = [super serializeAttributes];

		return s;
	}
	
	-(BOOL)isEqual:(id)object{
		if(object != nil && [object isKindOfClass:[RemoteWorklog class]]) {
			return [[self serialize] isEqualToString:[object serialize]];
		}
		return NO;
	}
	
	-(NSUInteger)hash{
		return [Soap generateHash:self];

	}
	
	- (void) dealloc
	{
		if(self.author != nil) { [self.author release]; }
		if(self.comment != nil) { [self.comment release]; }
		if(self.created != nil) { [self.created release]; }
		if(self.groupLevel != nil) { [self.groupLevel release]; }
		if(self._id != nil) { [self._id release]; }
		if(self.roleLevelId != nil) { [self.roleLevelId release]; }
		if(self.startDate != nil) { [self.startDate release]; }
		if(self.timeSpent != nil) { [self.timeSpent release]; }
		if(self.updateAuthor != nil) { [self.updateAuthor release]; }
		if(self.updated != nil) { [self.updated release]; }
		[super dealloc];
	}

@end
