/*
	RemoteAttachment.h
	The implementation of properties and methods for the RemoteAttachment object.
	Generated by SudzC.com
*/
#import "RemoteAttachment.h"

@implementation RemoteAttachment
	@synthesize author = _author;
	@synthesize created = _created;
	@synthesize filename = _filename;
	@synthesize filesize = _filesize;
	@synthesize mimetype = _mimetype;

	- (id) init
	{
		if(self = [super init])
		{
			self.author = nil;
			self.created = nil;
			self.filename = nil;
			self.mimetype = nil;

		}
		return self;
	}

	+ (RemoteAttachment*) newWithNode: (CXMLNode*) node
	{
		if(node == nil) { return nil; }
		return (RemoteAttachment*)[[[RemoteAttachment alloc] initWithNode: node] autorelease];
	}

	- (id) initWithNode: (CXMLNode*) node {
		if(self = [super initWithNode: node])
		{
			self.author = [Soap getNodeValue: node withName: @"author"];
			self.created = [Soap dateFromString: [Soap getNodeValue: node withName: @"created"]];
			self.filename = [Soap getNodeValue: node withName: @"filename"];
			self.filesize = [[Soap getNodeValue: node withName: @"filesize"] longLongValue];
			self.mimetype = [Soap getNodeValue: node withName: @"mimetype"];
		}
		return self;
	}

	- (NSMutableString*) serialize
	{
		return [self serialize: @"RemoteAttachment"];
	}
  
	- (NSMutableString*) serialize: (NSString*) nodeName
	{
		NSMutableString* s = [[NSMutableString alloc] init];
		[s appendFormat: @"<%@", nodeName];
		[s appendString: [self serializeAttributes]];
		[s appendString: @">"];
		[s appendString: [self serializeElements]];
		[s appendFormat: @"</%@>", nodeName];
		return [s autorelease];
	}
	
	- (NSMutableString*) serializeElements
	{
		NSMutableString* s = [super serializeElements];
		if (self.author != nil) [s appendFormat: @"<author>%@</author>", [[self.author stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.created != nil) [s appendFormat: @"<created>%@</created>", [Soap getDateString: self.created]];
		if (self.filename != nil) [s appendFormat: @"<filename>%@</filename>", [[self.filename stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		[s appendFormat: @"<filesize>%@</filesize>", [NSString stringWithFormat: @"%ld", self.filesize]];
		if (self.mimetype != nil) [s appendFormat: @"<mimetype>%@</mimetype>", [[self.mimetype stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];

		return s;
	}
	
	- (NSMutableString*) serializeAttributes
	{
		NSMutableString* s = [super serializeAttributes];

		return s;
	}
	
	-(BOOL)isEqual:(id)object{
		if(object != nil && [object isKindOfClass:[RemoteAttachment class]]) {
			return [[self serialize] isEqualToString:[object serialize]];
		}
		return NO;
	}
	
	-(NSUInteger)hash{
		return [Soap generateHash:self];

	}
	
	- (void) dealloc
	{
		if(self.author != nil) { [self.author release]; }
		if(self.created != nil) { [self.created release]; }
		if(self.filename != nil) { [self.filename release]; }
		if(self.mimetype != nil) { [self.mimetype release]; }
		[super dealloc];
	}

@end
