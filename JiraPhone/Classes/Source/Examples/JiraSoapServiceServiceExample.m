/*
	JiraSoapServiceServiceExample.m
	Provides example and test runs the service's proxy methods.
	Generated by SudzC.com
*/
#import "JiraSoapServiceServiceExample.h"
#import "JiraSoapServiceService.h"

@implementation JiraSoapServiceServiceExample
- (void)run {
	// Create the service
	service = [[JiraSoapServiceService alloc]init];
	service.logging = YES;
	[service login:self action:@selector(loginHandler:) in0: @"" in1: @""];

	// Returns RemoteProject*. 
//	[service createProject:self action:@selector(createProjectHandler:) in0:result in1: @"AAA2" in2: @"bbb2" in3: @"cc2" in4: @"http://mysite.com" in5: @"amaslov" in6: [[RemotePermissionScheme alloc] init] in7: nil in8: nil];	

//	service.username = @"";
//	service.password = @"";

	// Returns NSString*. 

//	// Returns . 
//	[service addActorsToProjectRole:self action:@selector(addActorsToProjectRoleHandler:) in0: @"" in1: [[ArrayOf_xsd_string alloc] init] in2: [[RemoteProjectRole alloc] init] in3: [[RemoteProject alloc] init] in4: @""];
//
//	// Returns BOOL. 
//	[service addAttachmentsToIssue:self action:@selector(addAttachmentsToIssueHandler:) in0: @"" in1: @"" in2: [[ArrayOf_xsd_string alloc] init] in3: [[ArrayOf_xsd_base64Binary alloc] init]];
//
//	// Returns BOOL. 
//	[service addBase64EncodedAttachmentsToIssue:self action:@selector(addBase64EncodedAttachmentsToIssueHandler:) in0: @"" in1: @"" in2: [[ArrayOf_xsd_string alloc] init] in3: [[ArrayOf_xsd_string alloc] init]];
//
//	// Returns . 
//	[service addComment:self action:@selector(addCommentHandler:) in0: @"" in1: @"" in2: [[RemoteComment alloc] init]];
//
//	// Returns . 
//	[service addDefaultActorsToProjectRole:self action:@selector(addDefaultActorsToProjectRoleHandler:) in0: @"" in1: [[ArrayOf_xsd_string alloc] init] in2: [[RemoteProjectRole alloc] init] in3: @""];
//
//	// Returns RemotePermissionScheme*. 
//	[service addPermissionTo:self action:@selector(addPermissionToHandler:) in0: @"" in1: [[RemotePermissionScheme alloc] init] in2: [[RemotePermission alloc] init] in3: [[RemoteEntity alloc] init]];
//
//	// Returns . 
//	[service addUserToGroup:self action:@selector(addUserToGroupHandler:) in0: @"" in1: [[RemoteGroup alloc] init] in2: [[RemoteUser alloc] init]];
//
//	// Returns RemoteVersion*. 
//	[service addVersion:self action:@selector(addVersionHandler:) in0: @"" in1: @"" in2: [[RemoteVersion alloc] init]];
//
//	// Returns RemoteWorklog*. 
//	[service addWorklogAndAutoAdjustRemainingEstimate:self action:@selector(addWorklogAndAutoAdjustRemainingEstimateHandler:) in0: @"" in1: @"" in2: [[RemoteWorklog alloc] init]];
//
//	// Returns RemoteWorklog*. 
//	[service addWorklogAndRetainRemainingEstimate:self action:@selector(addWorklogAndRetainRemainingEstimateHandler:) in0: @"" in1: @"" in2: [[RemoteWorklog alloc] init]];
//
//	// Returns RemoteWorklog*. 
//	[service addWorklogWithNewRemainingEstimate:self action:@selector(addWorklogWithNewRemainingEstimateHandler:) in0: @"" in1: @"" in2: [[RemoteWorklog alloc] init] in3: @""];
//
//	// Returns . 
//	[service archiveVersion:self action:@selector(archiveVersionHandler:) in0: @"" in1: @"" in2: @"" in3: NO];
//
//	// Returns RemoteGroup*. 
//	[service createGroup:self action:@selector(createGroupHandler:) in0: @"" in1: @"" in2: [[RemoteUser alloc] init]];
//
//	// Returns RemoteIssue*. 
//	[service createIssue:self action:@selector(createIssueHandler:) in0: @"" in1: [[RemoteIssue alloc] init]];
//
//	// Returns RemoteIssue*. 
//	[service createIssueWithSecurityLevel:self action:@selector(createIssueWithSecurityLevelHandler:) in0: @"" in1: [[RemoteIssue alloc] init] in2: 0];
//
//	// Returns RemotePermissionScheme*. 
//	[service createPermissionScheme:self action:@selector(createPermissionSchemeHandler:) in0: @"" in1: @"" in2: @""];
//	
//
//	// Returns RemoteProject*. 
//	[service createProjectFromObject:self action:@selector(createProjectFromObjectHandler:) in0: @"" in1: [[RemoteProject alloc] init]];
//
//	// Returns RemoteProjectRole*. 
//	[service createProjectRole:self action:@selector(createProjectRoleHandler:) in0: @"" in1: [[RemoteProjectRole alloc] init]];
//
//	// Returns RemoteUser*. 
//	[service createUser:self action:@selector(createUserHandler:) in0: @"" in1: @"" in2: @"" in3: @"" in4: @""];
//
//	// Returns . 
//	[service deleteGroup:self action:@selector(deleteGroupHandler:) in0: @"" in1: @"" in2: @""];
//
//	// Returns . 
//	[service deleteIssue:self action:@selector(deleteIssueHandler:) in0: @"" in1: @""];
//
//	// Returns RemotePermissionScheme*. 
//	[service deletePermissionFrom:self action:@selector(deletePermissionFromHandler:) in0: @"" in1: [[RemotePermissionScheme alloc] init] in2: [[RemotePermission alloc] init] in3: [[RemoteEntity alloc] init]];
//
//	// Returns . 
//	[service deletePermissionScheme:self action:@selector(deletePermissionSchemeHandler:) in0: @"" in1: @""];
//
//	// Returns . 
//	[service deleteProject:self action:@selector(deleteProjectHandler:) in0: @"" in1: @""];
//
//	// Returns . 
//	[service deleteProjectAvatar:self action:@selector(deleteProjectAvatarHandler:) in0: @"" in1: 0];
//
//	// Returns . 
//	[service deleteProjectRole:self action:@selector(deleteProjectRoleHandler:) in0: @"" in1: [[RemoteProjectRole alloc] init] in2: NO];
//
//	// Returns . 
//	[service deleteUser:self action:@selector(deleteUserHandler:) in0: @"" in1: @""];
//
//	// Returns . 
//	[service deleteWorklogAndAutoAdjustRemainingEstimate:self action:@selector(deleteWorklogAndAutoAdjustRemainingEstimateHandler:) in0: @"" in1: @""];
//
//	// Returns . 
//	[service deleteWorklogAndRetainRemainingEstimate:self action:@selector(deleteWorklogAndRetainRemainingEstimateHandler:) in0: @"" in1: @""];
//
//	// Returns . 
//	[service deleteWorklogWithNewRemainingEstimate:self action:@selector(deleteWorklogWithNewRemainingEstimateHandler:) in0: @"" in1: @"" in2: @""];
//
//	// Returns RemoteComment*. 
//	[service editComment:self action:@selector(editCommentHandler:) in0: @"" in1: [[RemoteComment alloc] init]];
//
//	// Returns ArrayOf_tns1_RemotePermission*. 
//	[service getAllPermissions:self action:@selector(getAllPermissionsHandler:) in0: @""];
//
//	// Returns ArrayOf_tns1_RemoteScheme*. 
//	[service getAssociatedNotificationSchemes:self action:@selector(getAssociatedNotificationSchemesHandler:) in0: @"" in1: [[RemoteProjectRole alloc] init]];
//
//	// Returns ArrayOf_tns1_RemoteScheme*. 
//	[service getAssociatedPermissionSchemes:self action:@selector(getAssociatedPermissionSchemesHandler:) in0: @"" in1: [[RemoteProjectRole alloc] init]];
//
//	// Returns ArrayOf_tns1_RemoteAttachment*. 
//	[service getAttachmentsFromIssue:self action:@selector(getAttachmentsFromIssueHandler:) in0: @"" in1: @""];
//
//	// Returns ArrayOf_tns1_RemoteNamedObject*. 
//	[service getAvailableActions:self action:@selector(getAvailableActionsHandler:) in0: @"" in1: @""];
//
//	// Returns RemoteComment*. 
//	[service getComment:self action:@selector(getCommentHandler:) in0: @"" in1: 0];
//
//	// Returns ArrayOf_tns1_RemoteComment*. 
//	[service getComments:self action:@selector(getCommentsHandler:) in0: @"" in1: @""];
//
//	// Returns ArrayOf_tns1_RemoteComponent*. 
//	[service getComponents:self action:@selector(getComponentsHandler:) in0: @"" in1: @""];
//
//	// Returns RemoteConfiguration*. 
//	[service getConfiguration:self action:@selector(getConfigurationHandler:) in0: @""];
//
//	// Returns ArrayOf_tns1_RemoteField*. 
//	[service getCustomFields:self action:@selector(getCustomFieldsHandler:) in0: @""];
//
//	// Returns RemoteRoleActors*. 
//	[service getDefaultRoleActors:self action:@selector(getDefaultRoleActorsHandler:) in0: @"" in1: [[RemoteProjectRole alloc] init]];
//
//	// Returns ArrayOf_tns1_RemoteFilter*. 
//	[service getFavouriteFilters:self action:@selector(getFavouriteFiltersHandler:) in0: @""];
//
//	// Returns ArrayOf_tns1_RemoteField*. 
//	[service getFieldsForAction:self action:@selector(getFieldsForActionHandler:) in0: @"" in1: @"" in2: @""];
//
//	// Returns ArrayOf_tns1_RemoteField*. 
//	[service getFieldsForEdit:self action:@selector(getFieldsForEditHandler:) in0: @"" in1: @""];
//
//	// Returns RemoteGroup*. 
//	[service getGroup:self action:@selector(getGroupHandler:) in0: @"" in1: @""];
//
//	// Returns RemoteIssue*. 
//	[service getIssue:self action:@selector(getIssueHandler:) in0: @"" in1: @""];
//
//	// Returns RemoteIssue*. 
//	[service getIssueById:self action:@selector(getIssueByIdHandler:) in0: @"" in1: @""];
//
//	// Returns long. 
//	[service getIssueCountForFilter:self action:@selector(getIssueCountForFilterHandler:) in0: @"" in1: @""];
//
//	// Returns ArrayOf_tns1_RemoteIssue*. 
//	[service getIssuesFromFilter:self action:@selector(getIssuesFromFilterHandler:) in0: @"" in1: @""];
//
//	// Returns ArrayOf_tns1_RemoteIssue*. 
//	[service getIssuesFromFilterWithLimit:self action:@selector(getIssuesFromFilterWithLimitHandler:) in0: @"" in1: @"" in2: 0 in3: 0];
//
//	// Returns ArrayOf_tns1_RemoteIssue*. 
//	[service getIssuesFromJqlSearch:self action:@selector(getIssuesFromJqlSearchHandler:) in0: @"" in1: @"" in2: 0];
//
//	// Returns ArrayOf_tns1_RemoteIssue*. 
//	[service getIssuesFromTextSearch:self action:@selector(getIssuesFromTextSearchHandler:) in0: @"" in1: @""];
//
//	// Returns ArrayOf_tns1_RemoteIssue*. 
//	[service getIssuesFromTextSearchWithLimit:self action:@selector(getIssuesFromTextSearchWithLimitHandler:) in0: @"" in1: @"" in2: 0 in3: 0];
//
//	// Returns ArrayOf_tns1_RemoteIssue*. 
//	[service getIssuesFromTextSearchWithProject:self action:@selector(getIssuesFromTextSearchWithProjectHandler:) in0: @"" in1: [[ArrayOf_xsd_string alloc] init] in2: @"" in3: 0];
//
//	// Returns ArrayOf_tns1_RemoteIssueType*. 
//	[service getIssueTypes:self action:@selector(getIssueTypesHandler:) in0: @""];
//
//	// Returns ArrayOf_tns1_RemoteIssueType*. 
//	[service getIssueTypesForProject:self action:@selector(getIssueTypesForProjectHandler:) in0: @"" in1: @""];
//
//	// Returns ArrayOf_tns1_RemoteScheme*. 
//	[service getNotificationSchemes:self action:@selector(getNotificationSchemesHandler:) in0: @""];
//
//	// Returns ArrayOf_tns1_RemotePermissionScheme*. 
//	[service getPermissionSchemes:self action:@selector(getPermissionSchemesHandler:) in0: @""];
//
//	// Returns ArrayOf_tns1_RemotePriority*. 
//	[service getPriorities:self action:@selector(getPrioritiesHandler:) in0: @""];
//
//	// Returns RemoteAvatar*. 
//	[service getProjectAvatar:self action:@selector(getProjectAvatarHandler:) in0: @"" in1: @""];
//
//	// Returns ArrayOf_tns1_RemoteAvatar*. 
//	[service getProjectAvatars:self action:@selector(getProjectAvatarsHandler:) in0: @"" in1: @"" in2: NO];
//
//	// Returns RemoteProject*. 
//	[service getProjectById:self action:@selector(getProjectByIdHandler:) in0: @"" in1: 0];
//
//	// Returns RemoteProject*. 
//	[service getProjectByKey:self action:@selector(getProjectByKeyHandler:) in0: @"" in1: @""];
//
//	// Returns RemoteProjectRole*. 
//	[service getProjectRole:self action:@selector(getProjectRoleHandler:) in0: @"" in1: 0];
//
//	// Returns RemoteProjectRoleActors*. 
//	[service getProjectRoleActors:self action:@selector(getProjectRoleActorsHandler:) in0: @"" in1: [[RemoteProjectRole alloc] init] in2: [[RemoteProject alloc] init]];
//
//	// Returns ArrayOf_tns1_RemoteProjectRole*. 
//	[service getProjectRoles:self action:@selector(getProjectRolesHandler:) in0: @""];
//
//	// Returns ArrayOf_tns1_RemoteProject*. 
//	[service getProjectsNoSchemes:self action:@selector(getProjectsNoSchemesHandler:) in0: @""];
//
//	// Returns RemoteProject*. 
//	[service getProjectWithSchemesById:self action:@selector(getProjectWithSchemesByIdHandler:) in0: @"" in1: 0];
//
//	// Returns NSDate*. 
//	[service getResolutionDateById:self action:@selector(getResolutionDateByIdHandler:) in0: @"" in1: 0];
//
//	// Returns NSDate*. 
//	[service getResolutionDateByKey:self action:@selector(getResolutionDateByKeyHandler:) in0: @"" in1: @""];
//
//	// Returns ArrayOf_tns1_RemoteResolution*. 
//	[service getResolutions:self action:@selector(getResolutionsHandler:) in0: @""];
//
//	// Returns ArrayOf_tns1_RemoteFilter*. 
//	[service getSavedFilters:self action:@selector(getSavedFiltersHandler:) in0: @""];
//
//	// Returns RemoteSecurityLevel*. 
//	[service getSecurityLevel:self action:@selector(getSecurityLevelHandler:) in0: @"" in1: @""];
//
//	// Returns ArrayOf_tns1_RemoteSecurityLevel*. 
//	[service getSecurityLevels:self action:@selector(getSecurityLevelsHandler:) in0: @"" in1: @""];
//
//	// Returns ArrayOf_tns1_RemoteScheme*. 
//	[service getSecuritySchemes:self action:@selector(getSecuritySchemesHandler:) in0: @""];
//
//	// Returns RemoteServerInfo*. 
//	[service getServerInfo:self action:@selector(getServerInfoHandler:) in0: @""];
//
//	// Returns ArrayOf_tns1_RemoteStatus*. 
//	[service getStatuses:self action:@selector(getStatusesHandler:) in0: @""];
//
//	// Returns ArrayOf_tns1_RemoteIssueType*. 
//	[service getSubTaskIssueTypes:self action:@selector(getSubTaskIssueTypesHandler:) in0: @""];
//
//	// Returns ArrayOf_tns1_RemoteIssueType*. 
//	[service getSubTaskIssueTypesForProject:self action:@selector(getSubTaskIssueTypesForProjectHandler:) in0: @"" in1: @""];
//
//	// Returns RemoteUser*. 
//	[service getUser:self action:@selector(getUserHandler:) in0: @"" in1: @""];
//
//	// Returns ArrayOf_tns1_RemoteVersion*. 
//	[service getVersions:self action:@selector(getVersionsHandler:) in0: @"" in1: @""];
//
//	// Returns ArrayOf_tns1_RemoteWorklog*. 
//	[service getWorklogs:self action:@selector(getWorklogsHandler:) in0: @"" in1: @""];
//
//	// Returns BOOL. 
//	[service hasPermissionToCreateWorklog:self action:@selector(hasPermissionToCreateWorklogHandler:) in0: @"" in1: @""];
//
//	// Returns BOOL. 
//	[service hasPermissionToDeleteWorklog:self action:@selector(hasPermissionToDeleteWorklogHandler:) in0: @"" in1: @""];
//
//	// Returns BOOL. 
//	[service hasPermissionToEditComment:self action:@selector(hasPermissionToEditCommentHandler:) in0: @"" in1: [[RemoteComment alloc] init]];
//
//	// Returns BOOL. 
//	[service hasPermissionToUpdateWorklog:self action:@selector(hasPermissionToUpdateWorklogHandler:) in0: @"" in1: @""];
//
//	// Returns BOOL. 
//	[service isProjectRoleNameUnique:self action:@selector(isProjectRoleNameUniqueHandler:) in0: @"" in1: @""];
//
//
//	// Returns BOOL. 
//	[service logout:self action:@selector(logoutHandler:) in0: @""];
//
//	// Returns RemoteIssue*. 
//	[service progressWorkflowAction:self action:@selector(progressWorkflowActionHandler:) in0: @"" in1: @"" in2: @"" in3: [[ArrayOf_tns1_RemoteFieldValue alloc] init]];
//
//	// Returns . 
//	[service refreshCustomFields:self action:@selector(refreshCustomFieldsHandler:) in0: @""];
//
//	// Returns . 
//	[service releaseVersion:self action:@selector(releaseVersionHandler:) in0: @"" in1: @"" in2: [[RemoteVersion alloc] init]];
//
//	// Returns . 
//	[service removeActorsFromProjectRole:self action:@selector(removeActorsFromProjectRoleHandler:) in0: @"" in1: [[ArrayOf_xsd_string alloc] init] in2: [[RemoteProjectRole alloc] init] in3: [[RemoteProject alloc] init] in4: @""];
//
//	// Returns . 
//	[service removeAllRoleActorsByNameAndType:self action:@selector(removeAllRoleActorsByNameAndTypeHandler:) in0: @"" in1: @"" in2: @""];
//
//	// Returns . 
//	[service removeAllRoleActorsByProject:self action:@selector(removeAllRoleActorsByProjectHandler:) in0: @"" in1: [[RemoteProject alloc] init]];
//
//	// Returns . 
//	[service removeDefaultActorsFromProjectRole:self action:@selector(removeDefaultActorsFromProjectRoleHandler:) in0: @"" in1: [[ArrayOf_xsd_string alloc] init] in2: [[RemoteProjectRole alloc] init] in3: @""];
//
//	// Returns . 
//	[service removeUserFromGroup:self action:@selector(removeUserFromGroupHandler:) in0: @"" in1: [[RemoteGroup alloc] init] in2: [[RemoteUser alloc] init]];
//
//	// Returns . 
//	[service setNewProjectAvatar:self action:@selector(setNewProjectAvatarHandler:) in0: @"" in1: @"" in2: @"" in3: @""];
//
//	// Returns . 
//	[service setProjectAvatar:self action:@selector(setProjectAvatarHandler:) in0: @"" in1: @"" in2: 0];
//
//	// Returns RemoteGroup*. 
//	[service updateGroup:self action:@selector(updateGroupHandler:) in0: @"" in1: [[RemoteGroup alloc] init]];
//
//	// Returns RemoteIssue*. 
//	[service updateIssue:self action:@selector(updateIssueHandler:) in0: @"" in1: @"" in2: [[ArrayOf_tns1_RemoteFieldValue alloc] init]];
//
//	// Returns RemoteProject*. 
//	[service updateProject:self action:@selector(updateProjectHandler:) in0: @"" in1: [[RemoteProject alloc] init]];
//
//	// Returns . 
//	[service updateProjectRole:self action:@selector(updateProjectRoleHandler:) in0: @"" in1: [[RemoteProjectRole alloc] init]];
//
//	// Returns . 
//	[service updateWorklogAndAutoAdjustRemainingEstimate:self action:@selector(updateWorklogAndAutoAdjustRemainingEstimateHandler:) in0: @"" in1: [[RemoteWorklog alloc] init]];
//
//	// Returns . 
//	[service updateWorklogAndRetainRemainingEstimate:self action:@selector(updateWorklogAndRetainRemainingEstimateHandler:) in0: @"" in1: [[RemoteWorklog alloc] init]];
//
//	// Returns . 
//	[service updateWorklogWithNewRemainingEstimate:self action:@selector(updateWorklogWithNewRemainingEstimateHandler:) in0: @"" in1: [[RemoteWorklog alloc] init] in2: @""];
}

	

// Handle the response from addActorsToProjectRole.
		
- (void) addActorsToProjectRoleHandler: () value {
			

	// Do something with the  result
		
	NSLog(@"addActorsToProjectRole has been run", nil);
			
}
	

// Handle the response from addAttachmentsToIssue.
		
- (void) addAttachmentsToIssueHandler: (BOOL) value {
			

	// Do something with the BOOL result
		
	NSLog(@"addAttachmentsToIssue returned the value: %@", [NSNumber numberWithBool:value]);
			
}
	

// Handle the response from addBase64EncodedAttachmentsToIssue.
		
- (void) addBase64EncodedAttachmentsToIssueHandler: (BOOL) value {
			

	// Do something with the BOOL result
		
	NSLog(@"addBase64EncodedAttachmentsToIssue returned the value: %@", [NSNumber numberWithBool:value]);
			
}
	

// Handle the response from addComment.
		
- (void) addCommentHandler: () value {
			

	// Do something with the  result
		
	NSLog(@"addComment has been run", nil);
			
}
	

// Handle the response from addDefaultActorsToProjectRole.
		
- (void) addDefaultActorsToProjectRoleHandler: () value {
			

	// Do something with the  result
		
	NSLog(@"addDefaultActorsToProjectRole has been run", nil);
			
}
	

// Handle the response from addPermissionTo.
		
- (void) addPermissionToHandler: (id) value {

	// Handle errors
	if([value isKindOfClass:[NSError class]]) {
		NSLog(@"%@", value);
		return;
	}

	// Handle faults
	if([value isKindOfClass:[SoapFault class]]) {
		NSLog(@"%@", value);
		return;
	}				
			

	// Do something with the RemotePermissionScheme* result
		RemotePermissionScheme* result = (RemotePermissionScheme*)value;
	NSLog(@"addPermissionTo returned the value: %@", result);
			
}
	

// Handle the response from addUserToGroup.
		
- (void) addUserToGroupHandler: () value {
			

	// Do something with the  result
		
	NSLog(@"addUserToGroup has been run", nil);
			
}
	

// Handle the response from addVersion.
		
- (void) addVersionHandler: (id) value {

	// Handle errors
	if([value isKindOfClass:[NSError class]]) {
		NSLog(@"%@", value);
		return;
	}

	// Handle faults
	if([value isKindOfClass:[SoapFault class]]) {
		NSLog(@"%@", value);
		return;
	}				
			

	// Do something with the RemoteVersion* result
		RemoteVersion* result = (RemoteVersion*)value;
	NSLog(@"addVersion returned the value: %@", result);
			
}
	

// Handle the response from addWorklogAndAutoAdjustRemainingEstimate.
		
- (void) addWorklogAndAutoAdjustRemainingEstimateHandler: (id) value {

	// Handle errors
	if([value isKindOfClass:[NSError class]]) {
		NSLog(@"%@", value);
		return;
	}

	// Handle faults
	if([value isKindOfClass:[SoapFault class]]) {
		NSLog(@"%@", value);
		return;
	}				
			

	// Do something with the RemoteWorklog* result
		RemoteWorklog* result = (RemoteWorklog*)value;
	NSLog(@"addWorklogAndAutoAdjustRemainingEstimate returned the value: %@", result);
			
}
	

// Handle the response from addWorklogAndRetainRemainingEstimate.
		
- (void) addWorklogAndRetainRemainingEstimateHandler: (id) value {

	// Handle errors
	if([value isKindOfClass:[NSError class]]) {
		NSLog(@"%@", value);
		return;
	}

	// Handle faults
	if([value isKindOfClass:[SoapFault class]]) {
		NSLog(@"%@", value);
		return;
	}				
			

	// Do something with the RemoteWorklog* result
		RemoteWorklog* result = (RemoteWorklog*)value;
	NSLog(@"addWorklogAndRetainRemainingEstimate returned the value: %@", result);
			
}
	

// Handle the response from addWorklogWithNewRemainingEstimate.
		
- (void) addWorklogWithNewRemainingEstimateHandler: (id) value {

	// Handle errors
	if([value isKindOfClass:[NSError class]]) {
		NSLog(@"%@", value);
		return;
	}

	// Handle faults
	if([value isKindOfClass:[SoapFault class]]) {
		NSLog(@"%@", value);
		return;
	}				
			

	// Do something with the RemoteWorklog* result
		RemoteWorklog* result = (RemoteWorklog*)value;
	NSLog(@"addWorklogWithNewRemainingEstimate returned the value: %@", result);
			
}
	

// Handle the response from archiveVersion.
		
- (void) archiveVersionHandler: () value {
			

	// Do something with the  result
		
	NSLog(@"archiveVersion has been run", nil);
			
}
	

// Handle the response from createGroup.
		
- (void) createGroupHandler: (id) value {

	// Handle errors
	if([value isKindOfClass:[NSError class]]) {
		NSLog(@"%@", value);
		return;
	}

	// Handle faults
	if([value isKindOfClass:[SoapFault class]]) {
		NSLog(@"%@", value);
		return;
	}				
			

	// Do something with the RemoteGroup* result
		RemoteGroup* result = (RemoteGroup*)value;
	NSLog(@"createGroup returned the value: %@", result);
			
}
	

// Handle the response from createIssue.
		
- (void) createIssueHandler: (id) value {

	// Handle errors
	if([value isKindOfClass:[NSError class]]) {
		NSLog(@"%@", value);
		return;
	}

	// Handle faults
	if([value isKindOfClass:[SoapFault class]]) {
		NSLog(@"%@", value);
		return;
	}				
			

	// Do something with the RemoteIssue* result
		RemoteIssue* result = (RemoteIssue*)value;
	NSLog(@"createIssue returned the value: %@", result);
			
}
	

// Handle the response from createIssueWithSecurityLevel.
		
- (void) createIssueWithSecurityLevelHandler: (id) value {

	// Handle errors
	if([value isKindOfClass:[NSError class]]) {
		NSLog(@"%@", value);
		return;
	}

	// Handle faults
	if([value isKindOfClass:[SoapFault class]]) {
		NSLog(@"%@", value);
		return;
	}				
			

	// Do something with the RemoteIssue* result
		RemoteIssue* result = (RemoteIssue*)value;
	NSLog(@"createIssueWithSecurityLevel returned the value: %@", result);
			
}
	

// Handle the response from createPermissionScheme.
		
- (void) createPermissionSchemeHandler: (id) value {

	// Handle errors
	if([value isKindOfClass:[NSError class]]) {
		NSLog(@"%@", value);
		return;
	}

	// Handle faults
	if([value isKindOfClass:[SoapFault class]]) {
		NSLog(@"%@", value);
		return;
	}				
			

	// Do something with the RemotePermissionScheme* result
		RemotePermissionScheme* result = (RemotePermissionScheme*)value;
	NSLog(@"createPermissionScheme returned the value: %@", result);
			
}
	

// Handle the response from createProject.
		
- (void) createProjectHandler: (id) value {

	// Handle errors
	if([value isKindOfClass:[NSError class]]) {
		NSLog(@"%@", value);
		return;
	}

	// Handle faults
	if([value isKindOfClass:[SoapFault class]]) {
		NSLog(@"%@", value);
		return;
	}				
			

	// Do something with the RemoteProject* result
		RemoteProject* result = (RemoteProject*)value;
	NSLog(@"createProject returned the value: %@", result);
			
}
	

// Handle the response from createProjectFromObject.
		
- (void) createProjectFromObjectHandler: (id) value {

	// Handle errors
	if([value isKindOfClass:[NSError class]]) {
		NSLog(@"%@", value);
		return;
	}

	// Handle faults
	if([value isKindOfClass:[SoapFault class]]) {
		NSLog(@"%@", value);
		return;
	}				
			

	// Do something with the RemoteProject* result
		RemoteProject* result = (RemoteProject*)value;
	NSLog(@"createProjectFromObject returned the value: %@", result);
			
}
	

// Handle the response from createProjectRole.
		
- (void) createProjectRoleHandler: (id) value {

	// Handle errors
	if([value isKindOfClass:[NSError class]]) {
		NSLog(@"%@", value);
		return;
	}

	// Handle faults
	if([value isKindOfClass:[SoapFault class]]) {
		NSLog(@"%@", value);
		return;
	}				
			

	// Do something with the RemoteProjectRole* result
		RemoteProjectRole* result = (RemoteProjectRole*)value;
	NSLog(@"createProjectRole returned the value: %@", result);
			
}
	

// Handle the response from createUser.
		
- (void) createUserHandler: (id) value {

	// Handle errors
	if([value isKindOfClass:[NSError class]]) {
		NSLog(@"%@", value);
		return;
	}

	// Handle faults
	if([value isKindOfClass:[SoapFault class]]) {
		NSLog(@"%@", value);
		return;
	}				
			

	// Do something with the RemoteUser* result
		RemoteUser* result = (RemoteUser*)value;
	NSLog(@"createUser returned the value: %@", result);
			
}
	

// Handle the response from deleteGroup.
		
- (void) deleteGroupHandler: () value {
			

	// Do something with the  result
		
	NSLog(@"deleteGroup has been run", nil);
			
}
	

// Handle the response from deleteIssue.
		
- (void) deleteIssueHandler: () value {
			

	// Do something with the  result
		
	NSLog(@"deleteIssue has been run", nil);
			
}
	

// Handle the response from deletePermissionFrom.
		
- (void) deletePermissionFromHandler: (id) value {

	// Handle errors
	if([value isKindOfClass:[NSError class]]) {
		NSLog(@"%@", value);
		return;
	}

	// Handle faults
	if([value isKindOfClass:[SoapFault class]]) {
		NSLog(@"%@", value);
		return;
	}				
			

	// Do something with the RemotePermissionScheme* result
		RemotePermissionScheme* result = (RemotePermissionScheme*)value;
	NSLog(@"deletePermissionFrom returned the value: %@", result);
			
}
	

// Handle the response from deletePermissionScheme.
		
- (void) deletePermissionSchemeHandler: () value {
			

	// Do something with the  result
		
	NSLog(@"deletePermissionScheme has been run", nil);
			
}
	

// Handle the response from deleteProject.
		
- (void) deleteProjectHandler: () value {
			

	// Do something with the  result
		
	NSLog(@"deleteProject has been run", nil);
			
}
	

// Handle the response from deleteProjectAvatar.
		
- (void) deleteProjectAvatarHandler: () value {
			

	// Do something with the  result
		
	NSLog(@"deleteProjectAvatar has been run", nil);
			
}
	

// Handle the response from deleteProjectRole.
		
- (void) deleteProjectRoleHandler: () value {
			

	// Do something with the  result
		
	NSLog(@"deleteProjectRole has been run", nil);
			
}
	

// Handle the response from deleteUser.
		
- (void) deleteUserHandler: () value {
			

	// Do something with the  result
		
	NSLog(@"deleteUser has been run", nil);
			
}
	

// Handle the response from deleteWorklogAndAutoAdjustRemainingEstimate.
		
- (void) deleteWorklogAndAutoAdjustRemainingEstimateHandler: () value {
			

	// Do something with the  result
		
	NSLog(@"deleteWorklogAndAutoAdjustRemainingEstimate has been run", nil);
			
}
	

// Handle the response from deleteWorklogAndRetainRemainingEstimate.
		
- (void) deleteWorklogAndRetainRemainingEstimateHandler: () value {
			

	// Do something with the  result
		
	NSLog(@"deleteWorklogAndRetainRemainingEstimate has been run", nil);
			
}
	

// Handle the response from deleteWorklogWithNewRemainingEstimate.
		
- (void) deleteWorklogWithNewRemainingEstimateHandler: () value {
			

	// Do something with the  result
		
	NSLog(@"deleteWorklogWithNewRemainingEstimate has been run", nil);
			
}
	

// Handle the response from editComment.
		
- (void) editCommentHandler: (id) value {

	// Handle errors
	if([value isKindOfClass:[NSError class]]) {
		NSLog(@"%@", value);
		return;
	}

	// Handle faults
	if([value isKindOfClass:[SoapFault class]]) {
		NSLog(@"%@", value);
		return;
	}				
			

	// Do something with the RemoteComment* result
		RemoteComment* result = (RemoteComment*)value;
	NSLog(@"editComment returned the value: %@", result);
			
}
	

// Handle the response from getAllPermissions.
		
- (void) getAllPermissionsHandler: (id) value {

	// Handle errors
	if([value isKindOfClass:[NSError class]]) {
		NSLog(@"%@", value);
		return;
	}

	// Handle faults
	if([value isKindOfClass:[SoapFault class]]) {
		NSLog(@"%@", value);
		return;
	}				
			

	// Do something with the ArrayOf_tns1_RemotePermission* result
		ArrayOf_tns1_RemotePermission* result = (ArrayOf_tns1_RemotePermission*)value;
	NSLog(@"getAllPermissions returned the value: %@", result);
			
}
	

// Handle the response from getAssociatedNotificationSchemes.
		
- (void) getAssociatedNotificationSchemesHandler: (id) value {

	// Handle errors
	if([value isKindOfClass:[NSError class]]) {
		NSLog(@"%@", value);
		return;
	}

	// Handle faults
	if([value isKindOfClass:[SoapFault class]]) {
		NSLog(@"%@", value);
		return;
	}				
			

	// Do something with the ArrayOf_tns1_RemoteScheme* result
		ArrayOf_tns1_RemoteScheme* result = (ArrayOf_tns1_RemoteScheme*)value;
	NSLog(@"getAssociatedNotificationSchemes returned the value: %@", result);
			
}
	

// Handle the response from getAssociatedPermissionSchemes.
		
- (void) getAssociatedPermissionSchemesHandler: (id) value {

	// Handle errors
	if([value isKindOfClass:[NSError class]]) {
		NSLog(@"%@", value);
		return;
	}

	// Handle faults
	if([value isKindOfClass:[SoapFault class]]) {
		NSLog(@"%@", value);
		return;
	}				
			

	// Do something with the ArrayOf_tns1_RemoteScheme* result
		ArrayOf_tns1_RemoteScheme* result = (ArrayOf_tns1_RemoteScheme*)value;
	NSLog(@"getAssociatedPermissionSchemes returned the value: %@", result);
			
}
	

// Handle the response from getAttachmentsFromIssue.
		
- (void) getAttachmentsFromIssueHandler: (id) value {

	// Handle errors
	if([value isKindOfClass:[NSError class]]) {
		NSLog(@"%@", value);
		return;
	}

	// Handle faults
	if([value isKindOfClass:[SoapFault class]]) {
		NSLog(@"%@", value);
		return;
	}				
			

	// Do something with the ArrayOf_tns1_RemoteAttachment* result
		ArrayOf_tns1_RemoteAttachment* result = (ArrayOf_tns1_RemoteAttachment*)value;
	NSLog(@"getAttachmentsFromIssue returned the value: %@", result);
			
}
	

// Handle the response from getAvailableActions.
		
- (void) getAvailableActionsHandler: (id) value {

	// Handle errors
	if([value isKindOfClass:[NSError class]]) {
		NSLog(@"%@", value);
		return;
	}

	// Handle faults
	if([value isKindOfClass:[SoapFault class]]) {
		NSLog(@"%@", value);
		return;
	}				
			

	// Do something with the ArrayOf_tns1_RemoteNamedObject* result
		ArrayOf_tns1_RemoteNamedObject* result = (ArrayOf_tns1_RemoteNamedObject*)value;
	NSLog(@"getAvailableActions returned the value: %@", result);
			
}
	

// Handle the response from getComment.
		
- (void) getCommentHandler: (id) value {

	// Handle errors
	if([value isKindOfClass:[NSError class]]) {
		NSLog(@"%@", value);
		return;
	}

	// Handle faults
	if([value isKindOfClass:[SoapFault class]]) {
		NSLog(@"%@", value);
		return;
	}				
			

	// Do something with the RemoteComment* result
		RemoteComment* result = (RemoteComment*)value;
	NSLog(@"getComment returned the value: %@", result);
			
}
	

// Handle the response from getComments.
		
- (void) getCommentsHandler: (id) value {

	// Handle errors
	if([value isKindOfClass:[NSError class]]) {
		NSLog(@"%@", value);
		return;
	}

	// Handle faults
	if([value isKindOfClass:[SoapFault class]]) {
		NSLog(@"%@", value);
		return;
	}				
			

	// Do something with the ArrayOf_tns1_RemoteComment* result
		ArrayOf_tns1_RemoteComment* result = (ArrayOf_tns1_RemoteComment*)value;
	NSLog(@"getComments returned the value: %@", result);
			
}
	

// Handle the response from getComponents.
		
- (void) getComponentsHandler: (id) value {

	// Handle errors
	if([value isKindOfClass:[NSError class]]) {
		NSLog(@"%@", value);
		return;
	}

	// Handle faults
	if([value isKindOfClass:[SoapFault class]]) {
		NSLog(@"%@", value);
		return;
	}				
			

	// Do something with the ArrayOf_tns1_RemoteComponent* result
		ArrayOf_tns1_RemoteComponent* result = (ArrayOf_tns1_RemoteComponent*)value;
	NSLog(@"getComponents returned the value: %@", result);
			
}
	

// Handle the response from getConfiguration.
		
- (void) getConfigurationHandler: (id) value {

	// Handle errors
	if([value isKindOfClass:[NSError class]]) {
		NSLog(@"%@", value);
		return;
	}

	// Handle faults
	if([value isKindOfClass:[SoapFault class]]) {
		NSLog(@"%@", value);
		return;
	}				
			

	// Do something with the RemoteConfiguration* result
		RemoteConfiguration* result = (RemoteConfiguration*)value;
	NSLog(@"getConfiguration returned the value: %@", result);
			
}
	

// Handle the response from getCustomFields.
		
- (void) getCustomFieldsHandler: (id) value {

	// Handle errors
	if([value isKindOfClass:[NSError class]]) {
		NSLog(@"%@", value);
		return;
	}

	// Handle faults
	if([value isKindOfClass:[SoapFault class]]) {
		NSLog(@"%@", value);
		return;
	}				
			

	// Do something with the ArrayOf_tns1_RemoteField* result
		ArrayOf_tns1_RemoteField* result = (ArrayOf_tns1_RemoteField*)value;
	NSLog(@"getCustomFields returned the value: %@", result);
			
}
	

// Handle the response from getDefaultRoleActors.
		
- (void) getDefaultRoleActorsHandler: (id) value {

	// Handle errors
	if([value isKindOfClass:[NSError class]]) {
		NSLog(@"%@", value);
		return;
	}

	// Handle faults
	if([value isKindOfClass:[SoapFault class]]) {
		NSLog(@"%@", value);
		return;
	}				
			

	// Do something with the RemoteRoleActors* result
		RemoteRoleActors* result = (RemoteRoleActors*)value;
	NSLog(@"getDefaultRoleActors returned the value: %@", result);
			
}
	

// Handle the response from getFavouriteFilters.
		
- (void) getFavouriteFiltersHandler: (id) value {

	// Handle errors
	if([value isKindOfClass:[NSError class]]) {
		NSLog(@"%@", value);
		return;
	}

	// Handle faults
	if([value isKindOfClass:[SoapFault class]]) {
		NSLog(@"%@", value);
		return;
	}				
			

	// Do something with the ArrayOf_tns1_RemoteFilter* result
		ArrayOf_tns1_RemoteFilter* result = (ArrayOf_tns1_RemoteFilter*)value;
	NSLog(@"getFavouriteFilters returned the value: %@", result);
			
}
	

// Handle the response from getFieldsForAction.
		
- (void) getFieldsForActionHandler: (id) value {

	// Handle errors
	if([value isKindOfClass:[NSError class]]) {
		NSLog(@"%@", value);
		return;
	}

	// Handle faults
	if([value isKindOfClass:[SoapFault class]]) {
		NSLog(@"%@", value);
		return;
	}				
			

	// Do something with the ArrayOf_tns1_RemoteField* result
		ArrayOf_tns1_RemoteField* result = (ArrayOf_tns1_RemoteField*)value;
	NSLog(@"getFieldsForAction returned the value: %@", result);
			
}
	

// Handle the response from getFieldsForEdit.
		
- (void) getFieldsForEditHandler: (id) value {

	// Handle errors
	if([value isKindOfClass:[NSError class]]) {
		NSLog(@"%@", value);
		return;
	}

	// Handle faults
	if([value isKindOfClass:[SoapFault class]]) {
		NSLog(@"%@", value);
		return;
	}				
			

	// Do something with the ArrayOf_tns1_RemoteField* result
		ArrayOf_tns1_RemoteField* result = (ArrayOf_tns1_RemoteField*)value;
	NSLog(@"getFieldsForEdit returned the value: %@", result);
			
}
	

// Handle the response from getGroup.
		
- (void) getGroupHandler: (id) value {

	// Handle errors
	if([value isKindOfClass:[NSError class]]) {
		NSLog(@"%@", value);
		return;
	}

	// Handle faults
	if([value isKindOfClass:[SoapFault class]]) {
		NSLog(@"%@", value);
		return;
	}				
			

	// Do something with the RemoteGroup* result
		RemoteGroup* result = (RemoteGroup*)value;
	NSLog(@"getGroup returned the value: %@", result);
			
}
	

// Handle the response from getIssue.
		
- (void) getIssueHandler: (id) value {

	// Handle errors
	if([value isKindOfClass:[NSError class]]) {
		NSLog(@"%@", value);
		return;
	}

	// Handle faults
	if([value isKindOfClass:[SoapFault class]]) {
		NSLog(@"%@", value);
		return;
	}				
			

	// Do something with the RemoteIssue* result
		RemoteIssue* result = (RemoteIssue*)value;
	NSLog(@"getIssue returned the value: %@", result);
			
}
	

// Handle the response from getIssueById.
		
- (void) getIssueByIdHandler: (id) value {

	// Handle errors
	if([value isKindOfClass:[NSError class]]) {
		NSLog(@"%@", value);
		return;
	}

	// Handle faults
	if([value isKindOfClass:[SoapFault class]]) {
		NSLog(@"%@", value);
		return;
	}				
			

	// Do something with the RemoteIssue* result
		RemoteIssue* result = (RemoteIssue*)value;
	NSLog(@"getIssueById returned the value: %@", result);
			
}
	

// Handle the response from getIssueCountForFilter.
		
- (void) getIssueCountForFilterHandler: (long) value {
			

	// Do something with the long result
		
	NSLog(@"getIssueCountForFilter returned the value: %@", [NSNumber numberWithLong:value]);
			
}
	

// Handle the response from getIssuesFromFilter.
		
- (void) getIssuesFromFilterHandler: (id) value {

	// Handle errors
	if([value isKindOfClass:[NSError class]]) {
		NSLog(@"%@", value);
		return;
	}

	// Handle faults
	if([value isKindOfClass:[SoapFault class]]) {
		NSLog(@"%@", value);
		return;
	}				
			

	// Do something with the ArrayOf_tns1_RemoteIssue* result
		ArrayOf_tns1_RemoteIssue* result = (ArrayOf_tns1_RemoteIssue*)value;
	NSLog(@"getIssuesFromFilter returned the value: %@", result);
			
}
	

// Handle the response from getIssuesFromFilterWithLimit.
		
- (void) getIssuesFromFilterWithLimitHandler: (id) value {

	// Handle errors
	if([value isKindOfClass:[NSError class]]) {
		NSLog(@"%@", value);
		return;
	}

	// Handle faults
	if([value isKindOfClass:[SoapFault class]]) {
		NSLog(@"%@", value);
		return;
	}				
			

	// Do something with the ArrayOf_tns1_RemoteIssue* result
		ArrayOf_tns1_RemoteIssue* result = (ArrayOf_tns1_RemoteIssue*)value;
	NSLog(@"getIssuesFromFilterWithLimit returned the value: %@", result);
			
}
	

// Handle the response from getIssuesFromJqlSearch.
		
- (void) getIssuesFromJqlSearchHandler: (id) value {

	// Handle errors
	if([value isKindOfClass:[NSError class]]) {
		NSLog(@"%@", value);
		return;
	}

	// Handle faults
	if([value isKindOfClass:[SoapFault class]]) {
		NSLog(@"%@", value);
		return;
	}				
			

	// Do something with the ArrayOf_tns1_RemoteIssue* result
		ArrayOf_tns1_RemoteIssue* result = (ArrayOf_tns1_RemoteIssue*)value;
	NSLog(@"getIssuesFromJqlSearch returned the value: %@", result);
			
}
	

// Handle the response from getIssuesFromTextSearch.
		
- (void) getIssuesFromTextSearchHandler: (id) value {

	// Handle errors
	if([value isKindOfClass:[NSError class]]) {
		NSLog(@"%@", value);
		return;
	}

	// Handle faults
	if([value isKindOfClass:[SoapFault class]]) {
		NSLog(@"%@", value);
		return;
	}				
			

	// Do something with the ArrayOf_tns1_RemoteIssue* result
		ArrayOf_tns1_RemoteIssue* result = (ArrayOf_tns1_RemoteIssue*)value;
	NSLog(@"getIssuesFromTextSearch returned the value: %@", result);
			
}
	

// Handle the response from getIssuesFromTextSearchWithLimit.
		
- (void) getIssuesFromTextSearchWithLimitHandler: (id) value {

	// Handle errors
	if([value isKindOfClass:[NSError class]]) {
		NSLog(@"%@", value);
		return;
	}

	// Handle faults
	if([value isKindOfClass:[SoapFault class]]) {
		NSLog(@"%@", value);
		return;
	}				
			

	// Do something with the ArrayOf_tns1_RemoteIssue* result
		ArrayOf_tns1_RemoteIssue* result = (ArrayOf_tns1_RemoteIssue*)value;
	NSLog(@"getIssuesFromTextSearchWithLimit returned the value: %@", result);
			
}
	

// Handle the response from getIssuesFromTextSearchWithProject.
		
- (void) getIssuesFromTextSearchWithProjectHandler: (id) value {

	// Handle errors
	if([value isKindOfClass:[NSError class]]) {
		NSLog(@"%@", value);
		return;
	}

	// Handle faults
	if([value isKindOfClass:[SoapFault class]]) {
		NSLog(@"%@", value);
		return;
	}				
			

	// Do something with the ArrayOf_tns1_RemoteIssue* result
		ArrayOf_tns1_RemoteIssue* result = (ArrayOf_tns1_RemoteIssue*)value;
	NSLog(@"getIssuesFromTextSearchWithProject returned the value: %@", result);
			
}
	

// Handle the response from getIssueTypes.
		
- (void) getIssueTypesHandler: (id) value {

	// Handle errors
	if([value isKindOfClass:[NSError class]]) {
		NSLog(@"%@", value);
		return;
	}

	// Handle faults
	if([value isKindOfClass:[SoapFault class]]) {
		NSLog(@"%@", value);
		return;
	}				
			

	// Do something with the ArrayOf_tns1_RemoteIssueType* result
		ArrayOf_tns1_RemoteIssueType* result = (ArrayOf_tns1_RemoteIssueType*)value;
	NSLog(@"getIssueTypes returned the value: %@", result);
			
}
	

// Handle the response from getIssueTypesForProject.
		
- (void) getIssueTypesForProjectHandler: (id) value {

	// Handle errors
	if([value isKindOfClass:[NSError class]]) {
		NSLog(@"%@", value);
		return;
	}

	// Handle faults
	if([value isKindOfClass:[SoapFault class]]) {
		NSLog(@"%@", value);
		return;
	}				
			

	// Do something with the ArrayOf_tns1_RemoteIssueType* result
		ArrayOf_tns1_RemoteIssueType* result = (ArrayOf_tns1_RemoteIssueType*)value;
	NSLog(@"getIssueTypesForProject returned the value: %@", result);
			
}
	

// Handle the response from getNotificationSchemes.
		
- (void) getNotificationSchemesHandler: (id) value {

	// Handle errors
	if([value isKindOfClass:[NSError class]]) {
		NSLog(@"%@", value);
		return;
	}

	// Handle faults
	if([value isKindOfClass:[SoapFault class]]) {
		NSLog(@"%@", value);
		return;
	}				
			

	// Do something with the ArrayOf_tns1_RemoteScheme* result
		ArrayOf_tns1_RemoteScheme* result = (ArrayOf_tns1_RemoteScheme*)value;
	NSLog(@"getNotificationSchemes returned the value: %@", result);
			
}
	

// Handle the response from getPermissionSchemes.
		
- (void) getPermissionSchemesHandler: (id) value {

	// Handle errors
	if([value isKindOfClass:[NSError class]]) {
		NSLog(@"%@", value);
		return;
	}

	// Handle faults
	if([value isKindOfClass:[SoapFault class]]) {
		NSLog(@"%@", value);
		return;
	}				
			

	// Do something with the ArrayOf_tns1_RemotePermissionScheme* result
		ArrayOf_tns1_RemotePermissionScheme* result = (ArrayOf_tns1_RemotePermissionScheme*)value;
	NSLog(@"getPermissionSchemes returned the value: %@", result);
			
}
	

// Handle the response from getPriorities.
		
- (void) getPrioritiesHandler: (id) value {

	// Handle errors
	if([value isKindOfClass:[NSError class]]) {
		NSLog(@"%@", value);
		return;
	}

	// Handle faults
	if([value isKindOfClass:[SoapFault class]]) {
		NSLog(@"%@", value);
		return;
	}				
			

	// Do something with the ArrayOf_tns1_RemotePriority* result
		ArrayOf_tns1_RemotePriority* result = (ArrayOf_tns1_RemotePriority*)value;
	NSLog(@"getPriorities returned the value: %@", result);
			
}
	

// Handle the response from getProjectAvatar.
		
- (void) getProjectAvatarHandler: (id) value {

	// Handle errors
	if([value isKindOfClass:[NSError class]]) {
		NSLog(@"%@", value);
		return;
	}

	// Handle faults
	if([value isKindOfClass:[SoapFault class]]) {
		NSLog(@"%@", value);
		return;
	}				
			

	// Do something with the RemoteAvatar* result
		RemoteAvatar* result = (RemoteAvatar*)value;
	NSLog(@"getProjectAvatar returned the value: %@", result);
			
}
	

// Handle the response from getProjectAvatars.
		
- (void) getProjectAvatarsHandler: (id) value {

	// Handle errors
	if([value isKindOfClass:[NSError class]]) {
		NSLog(@"%@", value);
		return;
	}

	// Handle faults
	if([value isKindOfClass:[SoapFault class]]) {
		NSLog(@"%@", value);
		return;
	}				
			

	// Do something with the ArrayOf_tns1_RemoteAvatar* result
		ArrayOf_tns1_RemoteAvatar* result = (ArrayOf_tns1_RemoteAvatar*)value;
	NSLog(@"getProjectAvatars returned the value: %@", result);
			
}
	

// Handle the response from getProjectById.
		
- (void) getProjectByIdHandler: (id) value {

	// Handle errors
	if([value isKindOfClass:[NSError class]]) {
		NSLog(@"%@", value);
		return;
	}

	// Handle faults
	if([value isKindOfClass:[SoapFault class]]) {
		NSLog(@"%@", value);
		return;
	}				
			

	// Do something with the RemoteProject* result
		RemoteProject* result = (RemoteProject*)value;
	NSLog(@"getProjectById returned the value: %@", result);
			
}
	

// Handle the response from getProjectByKey.
		
- (void) getProjectByKeyHandler: (id) value {

	// Handle errors
	if([value isKindOfClass:[NSError class]]) {
		NSLog(@"%@", value);
		return;
	}

	// Handle faults
	if([value isKindOfClass:[SoapFault class]]) {
		NSLog(@"%@", value);
		return;
	}				
			

	// Do something with the RemoteProject* result
		RemoteProject* result = (RemoteProject*)value;
	NSLog(@"getProjectByKey returned the value: %@", result);
			
}
	

// Handle the response from getProjectRole.
		
- (void) getProjectRoleHandler: (id) value {

	// Handle errors
	if([value isKindOfClass:[NSError class]]) {
		NSLog(@"%@", value);
		return;
	}

	// Handle faults
	if([value isKindOfClass:[SoapFault class]]) {
		NSLog(@"%@", value);
		return;
	}				
			

	// Do something with the RemoteProjectRole* result
		RemoteProjectRole* result = (RemoteProjectRole*)value;
	NSLog(@"getProjectRole returned the value: %@", result);
			
}
	

// Handle the response from getProjectRoleActors.
		
- (void) getProjectRoleActorsHandler: (id) value {

	// Handle errors
	if([value isKindOfClass:[NSError class]]) {
		NSLog(@"%@", value);
		return;
	}

	// Handle faults
	if([value isKindOfClass:[SoapFault class]]) {
		NSLog(@"%@", value);
		return;
	}				
			

	// Do something with the RemoteProjectRoleActors* result
		RemoteProjectRoleActors* result = (RemoteProjectRoleActors*)value;
	NSLog(@"getProjectRoleActors returned the value: %@", result);
			
}
	

// Handle the response from getProjectRoles.
		
- (void) getProjectRolesHandler: (id) value {

	// Handle errors
	if([value isKindOfClass:[NSError class]]) {
		NSLog(@"%@", value);
		return;
	}

	// Handle faults
	if([value isKindOfClass:[SoapFault class]]) {
		NSLog(@"%@", value);
		return;
	}				
			

	// Do something with the ArrayOf_tns1_RemoteProjectRole* result
		ArrayOf_tns1_RemoteProjectRole* result = (ArrayOf_tns1_RemoteProjectRole*)value;
	NSLog(@"getProjectRoles returned the value: %@", result);
			
}
	

// Handle the response from getProjectsNoSchemes.
		
- (void) getProjectsNoSchemesHandler: (id) value {

	// Handle errors
	if([value isKindOfClass:[NSError class]]) {
		NSLog(@"%@", value);
		return;
	}

	// Handle faults
	if([value isKindOfClass:[SoapFault class]]) {
		NSLog(@"%@", value);
		return;
	}				
			

	// Do something with the ArrayOf_tns1_RemoteProject* result
		ArrayOf_tns1_RemoteProject* result = (ArrayOf_tns1_RemoteProject*)value;
	NSLog(@"getProjectsNoSchemes returned the value: %@", result);
			
}
	

// Handle the response from getProjectWithSchemesById.
		
- (void) getProjectWithSchemesByIdHandler: (id) value {

	// Handle errors
	if([value isKindOfClass:[NSError class]]) {
		NSLog(@"%@", value);
		return;
	}

	// Handle faults
	if([value isKindOfClass:[SoapFault class]]) {
		NSLog(@"%@", value);
		return;
	}				
			

	// Do something with the RemoteProject* result
		RemoteProject* result = (RemoteProject*)value;
	NSLog(@"getProjectWithSchemesById returned the value: %@", result);
			
}
	

// Handle the response from getResolutionDateById.
		
- (void) getResolutionDateByIdHandler: (id) value {

	// Handle errors
	if([value isKindOfClass:[NSError class]]) {
		NSLog(@"%@", value);
		return;
	}

	// Handle faults
	if([value isKindOfClass:[SoapFault class]]) {
		NSLog(@"%@", value);
		return;
	}				
			

	// Do something with the NSDate* result
		NSDate* result = (NSDate*)value;
	NSLog(@"getResolutionDateById returned the value: %@", result);
			
}
	

// Handle the response from getResolutionDateByKey.
		
- (void) getResolutionDateByKeyHandler: (id) value {

	// Handle errors
	if([value isKindOfClass:[NSError class]]) {
		NSLog(@"%@", value);
		return;
	}

	// Handle faults
	if([value isKindOfClass:[SoapFault class]]) {
		NSLog(@"%@", value);
		return;
	}				
			

	// Do something with the NSDate* result
		NSDate* result = (NSDate*)value;
	NSLog(@"getResolutionDateByKey returned the value: %@", result);
			
}
	

// Handle the response from getResolutions.
		
- (void) getResolutionsHandler: (id) value {

	// Handle errors
	if([value isKindOfClass:[NSError class]]) {
		NSLog(@"%@", value);
		return;
	}

	// Handle faults
	if([value isKindOfClass:[SoapFault class]]) {
		NSLog(@"%@", value);
		return;
	}				
			

	// Do something with the ArrayOf_tns1_RemoteResolution* result
		ArrayOf_tns1_RemoteResolution* result = (ArrayOf_tns1_RemoteResolution*)value;
	NSLog(@"getResolutions returned the value: %@", result);
			
}
	

// Handle the response from getSavedFilters.
		
- (void) getSavedFiltersHandler: (id) value {

	// Handle errors
	if([value isKindOfClass:[NSError class]]) {
		NSLog(@"%@", value);
		return;
	}

	// Handle faults
	if([value isKindOfClass:[SoapFault class]]) {
		NSLog(@"%@", value);
		return;
	}				
			

	// Do something with the ArrayOf_tns1_RemoteFilter* result
		ArrayOf_tns1_RemoteFilter* result = (ArrayOf_tns1_RemoteFilter*)value;
	NSLog(@"getSavedFilters returned the value: %@", result);
			
}
	

// Handle the response from getSecurityLevel.
		
- (void) getSecurityLevelHandler: (id) value {

	// Handle errors
	if([value isKindOfClass:[NSError class]]) {
		NSLog(@"%@", value);
		return;
	}

	// Handle faults
	if([value isKindOfClass:[SoapFault class]]) {
		NSLog(@"%@", value);
		return;
	}				
			

	// Do something with the RemoteSecurityLevel* result
		RemoteSecurityLevel* result = (RemoteSecurityLevel*)value;
	NSLog(@"getSecurityLevel returned the value: %@", result);
			
}
	

// Handle the response from getSecurityLevels.
		
- (void) getSecurityLevelsHandler: (id) value {

	// Handle errors
	if([value isKindOfClass:[NSError class]]) {
		NSLog(@"%@", value);
		return;
	}

	// Handle faults
	if([value isKindOfClass:[SoapFault class]]) {
		NSLog(@"%@", value);
		return;
	}				
			

	// Do something with the ArrayOf_tns1_RemoteSecurityLevel* result
		ArrayOf_tns1_RemoteSecurityLevel* result = (ArrayOf_tns1_RemoteSecurityLevel*)value;
	NSLog(@"getSecurityLevels returned the value: %@", result);
			
}
	

// Handle the response from getSecuritySchemes.
		
- (void) getSecuritySchemesHandler: (id) value {

	// Handle errors
	if([value isKindOfClass:[NSError class]]) {
		NSLog(@"%@", value);
		return;
	}

	// Handle faults
	if([value isKindOfClass:[SoapFault class]]) {
		NSLog(@"%@", value);
		return;
	}				
			

	// Do something with the ArrayOf_tns1_RemoteScheme* result
		ArrayOf_tns1_RemoteScheme* result = (ArrayOf_tns1_RemoteScheme*)value;
	NSLog(@"getSecuritySchemes returned the value: %@", result);
			
}
	

// Handle the response from getServerInfo.
		
- (void) getServerInfoHandler: (id) value {

	// Handle errors
	if([value isKindOfClass:[NSError class]]) {
		NSLog(@"%@", value);
		return;
	}

	// Handle faults
	if([value isKindOfClass:[SoapFault class]]) {
		NSLog(@"%@", value);
		return;
	}				
			

	// Do something with the RemoteServerInfo* result
		RemoteServerInfo* result = (RemoteServerInfo*)value;
	NSLog(@"getServerInfo returned the value: %@", result);
			
}
	

// Handle the response from getStatuses.
		
- (void) getStatusesHandler: (id) value {

	// Handle errors
	if([value isKindOfClass:[NSError class]]) {
		NSLog(@"%@", value);
		return;
	}

	// Handle faults
	if([value isKindOfClass:[SoapFault class]]) {
		NSLog(@"%@", value);
		return;
	}				
			

	// Do something with the ArrayOf_tns1_RemoteStatus* result
		ArrayOf_tns1_RemoteStatus* result = (ArrayOf_tns1_RemoteStatus*)value;
	NSLog(@"getStatuses returned the value: %@", result);
			
}
	

// Handle the response from getSubTaskIssueTypes.
		
- (void) getSubTaskIssueTypesHandler: (id) value {

	// Handle errors
	if([value isKindOfClass:[NSError class]]) {
		NSLog(@"%@", value);
		return;
	}

	// Handle faults
	if([value isKindOfClass:[SoapFault class]]) {
		NSLog(@"%@", value);
		return;
	}				
			

	// Do something with the ArrayOf_tns1_RemoteIssueType* result
		ArrayOf_tns1_RemoteIssueType* result = (ArrayOf_tns1_RemoteIssueType*)value;
	NSLog(@"getSubTaskIssueTypes returned the value: %@", result);
			
}
	

// Handle the response from getSubTaskIssueTypesForProject.
		
- (void) getSubTaskIssueTypesForProjectHandler: (id) value {

	// Handle errors
	if([value isKindOfClass:[NSError class]]) {
		NSLog(@"%@", value);
		return;
	}

	// Handle faults
	if([value isKindOfClass:[SoapFault class]]) {
		NSLog(@"%@", value);
		return;
	}				
			

	// Do something with the ArrayOf_tns1_RemoteIssueType* result
		ArrayOf_tns1_RemoteIssueType* result = (ArrayOf_tns1_RemoteIssueType*)value;
	NSLog(@"getSubTaskIssueTypesForProject returned the value: %@", result);
			
}
	

// Handle the response from getUser.
		
- (void) getUserHandler: (id) value {

	// Handle errors
	if([value isKindOfClass:[NSError class]]) {
		NSLog(@"%@", value);
		return;
	}

	// Handle faults
	if([value isKindOfClass:[SoapFault class]]) {
		NSLog(@"%@", value);
		return;
	}				
			

	// Do something with the RemoteUser* result
		RemoteUser* result = (RemoteUser*)value;
	NSLog(@"getUser returned the value: %@", result);
			
}
	

// Handle the response from getVersions.
		
- (void) getVersionsHandler: (id) value {

	// Handle errors
	if([value isKindOfClass:[NSError class]]) {
		NSLog(@"%@", value);
		return;
	}

	// Handle faults
	if([value isKindOfClass:[SoapFault class]]) {
		NSLog(@"%@", value);
		return;
	}				
			

	// Do something with the ArrayOf_tns1_RemoteVersion* result
		ArrayOf_tns1_RemoteVersion* result = (ArrayOf_tns1_RemoteVersion*)value;
	NSLog(@"getVersions returned the value: %@", result);
			
}
	

// Handle the response from getWorklogs.
		
- (void) getWorklogsHandler: (id) value {

	// Handle errors
	if([value isKindOfClass:[NSError class]]) {
		NSLog(@"%@", value);
		return;
	}

	// Handle faults
	if([value isKindOfClass:[SoapFault class]]) {
		NSLog(@"%@", value);
		return;
	}				
			

	// Do something with the ArrayOf_tns1_RemoteWorklog* result
		ArrayOf_tns1_RemoteWorklog* result = (ArrayOf_tns1_RemoteWorklog*)value;
	NSLog(@"getWorklogs returned the value: %@", result);
			
}
	

// Handle the response from hasPermissionToCreateWorklog.
		
- (void) hasPermissionToCreateWorklogHandler: (BOOL) value {
			

	// Do something with the BOOL result
		
	NSLog(@"hasPermissionToCreateWorklog returned the value: %@", [NSNumber numberWithBool:value]);
			
}
	

// Handle the response from hasPermissionToDeleteWorklog.
		
- (void) hasPermissionToDeleteWorklogHandler: (BOOL) value {
			

	// Do something with the BOOL result
		
	NSLog(@"hasPermissionToDeleteWorklog returned the value: %@", [NSNumber numberWithBool:value]);
			
}
	

// Handle the response from hasPermissionToEditComment.
		
- (void) hasPermissionToEditCommentHandler: (BOOL) value {
			

	// Do something with the BOOL result
		
	NSLog(@"hasPermissionToEditComment returned the value: %@", [NSNumber numberWithBool:value]);
			
}
	

// Handle the response from hasPermissionToUpdateWorklog.
		
- (void) hasPermissionToUpdateWorklogHandler: (BOOL) value {
			

	// Do something with the BOOL result
		
	NSLog(@"hasPermissionToUpdateWorklog returned the value: %@", [NSNumber numberWithBool:value]);
			
}
	

// Handle the response from isProjectRoleNameUnique.
		
- (void) isProjectRoleNameUniqueHandler: (BOOL) value {
			

	// Do something with the BOOL result
		
	NSLog(@"isProjectRoleNameUnique returned the value: %@", [NSNumber numberWithBool:value]);
			
}
	

// Handle the response from login.
		
- (void) loginHandler: (id) value {

	// Handle errors
	if([value isKindOfClass:[NSError class]]) {
		NSLog(@"%@", value);
		return;
	}

	// Handle faults
	if([value isKindOfClass:[SoapFault class]]) {
		NSLog(@"%@", value);
		return;
	}				

	// Do something with the NSString* result
		NSString* result = (NSString*)value;
	NSLog(@"login returned the value: %@", result);

	// Returns RemoteProject*. 
	[service createProject:self action:@selector(createProjectHandler:) in0:result in1: @"AAA" in2: @"bbb" in3: @"cc" in4: @"http://localhost" in5: @"amaslov" in6: [[RemotePermissionScheme alloc] init] in7: nil in8: nil];
	
}
	

// Handle the response from logout.
		
- (void) logoutHandler: (BOOL) value {
			

	// Do something with the BOOL result
		
	NSLog(@"logout returned the value: %@", [NSNumber numberWithBool:value]);
			
}
	

// Handle the response from progressWorkflowAction.
		
- (void) progressWorkflowActionHandler: (id) value {

	// Handle errors
	if([value isKindOfClass:[NSError class]]) {
		NSLog(@"%@", value);
		return;
	}

	// Handle faults
	if([value isKindOfClass:[SoapFault class]]) {
		NSLog(@"%@", value);
		return;
	}				
			

	// Do something with the RemoteIssue* result
		RemoteIssue* result = (RemoteIssue*)value;
	NSLog(@"progressWorkflowAction returned the value: %@", result);
			
}
	

// Handle the response from refreshCustomFields.
		
- (void) refreshCustomFieldsHandler: () value {
			

	// Do something with the  result
		
	NSLog(@"refreshCustomFields has been run", nil);
			
}
	

// Handle the response from releaseVersion.
		
- (void) releaseVersionHandler: () value {
			

	// Do something with the  result
		
	NSLog(@"releaseVersion has been run", nil);
			
}
	

// Handle the response from removeActorsFromProjectRole.
		
- (void) removeActorsFromProjectRoleHandler: () value {
			

	// Do something with the  result
		
	NSLog(@"removeActorsFromProjectRole has been run", nil);
			
}
	

// Handle the response from removeAllRoleActorsByNameAndType.
		
- (void) removeAllRoleActorsByNameAndTypeHandler: () value {
			

	// Do something with the  result
		
	NSLog(@"removeAllRoleActorsByNameAndType has been run", nil);
			
}
	

// Handle the response from removeAllRoleActorsByProject.
		
- (void) removeAllRoleActorsByProjectHandler: () value {
			

	// Do something with the  result
		
	NSLog(@"removeAllRoleActorsByProject has been run", nil);
			
}
	

// Handle the response from removeDefaultActorsFromProjectRole.
		
- (void) removeDefaultActorsFromProjectRoleHandler: () value {
			

	// Do something with the  result
		
	NSLog(@"removeDefaultActorsFromProjectRole has been run", nil);
			
}
	

// Handle the response from removeUserFromGroup.
		
- (void) removeUserFromGroupHandler: () value {
			

	// Do something with the  result
		
	NSLog(@"removeUserFromGroup has been run", nil);
			
}
	

// Handle the response from setNewProjectAvatar.
		
- (void) setNewProjectAvatarHandler: () value {
			

	// Do something with the  result
		
	NSLog(@"setNewProjectAvatar has been run", nil);
			
}
	

// Handle the response from setProjectAvatar.
		
- (void) setProjectAvatarHandler: () value {
			

	// Do something with the  result
		
	NSLog(@"setProjectAvatar has been run", nil);
			
}
	

// Handle the response from updateGroup.
		
- (void) updateGroupHandler: (id) value {

	// Handle errors
	if([value isKindOfClass:[NSError class]]) {
		NSLog(@"%@", value);
		return;
	}

	// Handle faults
	if([value isKindOfClass:[SoapFault class]]) {
		NSLog(@"%@", value);
		return;
	}				
			

	// Do something with the RemoteGroup* result
		RemoteGroup* result = (RemoteGroup*)value;
	NSLog(@"updateGroup returned the value: %@", result);
			
}
	

// Handle the response from updateIssue.
		
- (void) updateIssueHandler: (id) value {

	// Handle errors
	if([value isKindOfClass:[NSError class]]) {
		NSLog(@"%@", value);
		return;
	}

	// Handle faults
	if([value isKindOfClass:[SoapFault class]]) {
		NSLog(@"%@", value);
		return;
	}				
			

	// Do something with the RemoteIssue* result
		RemoteIssue* result = (RemoteIssue*)value;
	NSLog(@"updateIssue returned the value: %@", result);
			
}
	

// Handle the response from updateProject.
		
- (void) updateProjectHandler: (id) value {

	// Handle errors
	if([value isKindOfClass:[NSError class]]) {
		NSLog(@"%@", value);
		return;
	}

	// Handle faults
	if([value isKindOfClass:[SoapFault class]]) {
		NSLog(@"%@", value);
		return;
	}				
			

	// Do something with the RemoteProject* result
		RemoteProject* result = (RemoteProject*)value;
	NSLog(@"updateProject returned the value: %@", result);
			
}
	

// Handle the response from updateProjectRole.
		
- (void) updateProjectRoleHandler: () value {
			

	// Do something with the  result
		
	NSLog(@"updateProjectRole has been run", nil);
			
}
	

// Handle the response from updateWorklogAndAutoAdjustRemainingEstimate.
		
- (void) updateWorklogAndAutoAdjustRemainingEstimateHandler: () value {
			

	// Do something with the  result
		
	NSLog(@"updateWorklogAndAutoAdjustRemainingEstimate has been run", nil);
			
}
	

// Handle the response from updateWorklogAndRetainRemainingEstimate.
		
- (void) updateWorklogAndRetainRemainingEstimateHandler: () value {
			

	// Do something with the  result
		
	NSLog(@"updateWorklogAndRetainRemainingEstimate has been run", nil);
			
}
	

// Handle the response from updateWorklogWithNewRemainingEstimate.
		
- (void) updateWorklogWithNewRemainingEstimateHandler: () value {
			

	// Do something with the  result
		
	NSLog(@"updateWorklogWithNewRemainingEstimate has been run", nil);
			
}
	

@end
		